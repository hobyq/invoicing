<?phpnamespace App\EntityListener;use App\Entity\Invoice;use App\Entity\PurchasedItem;use Doctrine\ORM\EntityManagerInterface;use Doctrine\ORM\Event\LifecycleEventArgs;use Doctrine\ORM\Event\PreUpdateEventArgs;class InvoiceEntityListener{    private $entityManager;    public function __construct(EntityManagerInterface $entityManager)    {        $this->entityManager = $entityManager;    }    public function prePersist(Invoice $invoice, LifecycleEventArgs $event)    {        $invoice->setTimestamp(new \DateTime());        $totalItemsPrice = 0;        foreach ($invoice->getItems() as $item) {            $totalItemsPrice += $item->getPrice();        }        $invoice->setItemsPrice($totalItemsPrice);        $invoice->setVat($invoice->getItemsPrice() * $invoice->getClient()->getCountry()->getVat());        $invoice->setTotalPrice($invoice->getItemsPrice() + $invoice->getVat());    }    public function postPersist(Invoice $invoice, LifecycleEventArgs $event)    {        foreach ($invoice->getItems() as $item) {            $purchasedItem = new PurchasedItem();            $purchasedItem->setInvoice($invoice);            $purchasedItem->setPurchasePrice($item->getPrice());            $purchasedItem->setStoreItem($item);            $this->entityManager->persist($purchasedItem);        }        $this->entityManager->flush();    }    public function preUpdate(Invoice $invoice, PreUpdateEventArgs $eventArgs)    {        // only one change is allowed to the status        if ($eventArgs->hasChangedField('status') && count($eventArgs->getEntityChangeSet()) == 1) {            $before = $eventArgs->getOldValue('status');            $after = $eventArgs->getNewValue('status');            if ($before->getId() >= $after->getId()) {                $eventArgs->setNewValue('status', $before);            }        }    }}